name: Notify Discord

on:
  schedule:
    - cron: '0 12 * * *' # Runs daily at 12:00 UTC
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    paths:
      - 'job-listings/.github/scripts/listings.json' # Triggers only when listings.json is updated
      branches:
      - main

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout job listings repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/Summer2025-Internships # Public repository with job listings
          path: job-listings

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      - name: Extract and Send job listings
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from datetime import datetime
          import requests
          from pathlib import Path

          # Load the listings
          listings_path = Path('job-listings/.github/scripts/listings.json')
          with listings_path.open() as f:
              listings = json.load(f)

          # Load sent listing IDs from the environment variable
          sent_listing_ids = os.getenv('SENT_LISTINGS', '').split(',')
          sent_listing_ids = [x for x in sent_listing_ids if x]  # Remove empty strings

          # Get new listings that haven't been sent before
          new_listings = [listing for listing in listings if listing['id'] not in sent_listing_ids]

          for recent_listing in new_listings:
              # Extract listing details
              company_name = recent_listing['company_name']
              title = recent_listing['title']
              locations = ', '.join(recent_listing['locations'])
              url = recent_listing['url']
              date_posted = datetime.fromtimestamp(recent_listing['date_posted']).strftime('%Y-%m-%d')
              terms = ', '.join(recent_listing['terms'])

              # Format the message
              message = (
                  f"**Company:** {company_name}\n"
                  f"**Role:** {title}\n"
                  f"**Location:** {locations}\n"
                  f"**Application/Link:** [Apply Here]({url})\n"
                  f"**Date Posted:** {date_posted}\n"
                  f"**Terms:** {terms}\n"
                  "---------------------------"
              )

              # Send the message to Discord
              response = requests.post(
                  os.getenv('DISCORD_WEBHOOK'),
                  json={'content': message}
              )

              # Raise an error if the request failed
              response.raise_for_status()

              # Output the sent message
              print("\n--- Sent Listing ---")
              print(message)

              # Append the listing ID to the sent listing IDs
              sent_listing_ids.append(recent_listing['id'])

          # Save the updated list of sent listing IDs
          new_sent_listing_ids = ','.join(sent_listing_ids)
          print(f"::set-output name=sent_listings::{new_sent_listing_ids}")

          EOF
          python script.py

      - name: Persist sent listings
        if: success()
        run: echo "SENT_LISTINGS=${{ steps.extract_and_send.outputs.sent_listings }}" >> $GITHUB_ENV

name: Notify on New Job Listing

on:
  push:
    paths:
      - 'job-listings/.github/scripts/listings.json'
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout job listings repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq

      - name: Extract and Send job listings
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from pathlib import Path
          from datetime import datetime

          def setOutput(key, value):
              if output := os.getenv('GITHUB_OUTPUT', None):
                  with open(output, 'a') as fh:
                      print(f'{key}={value}', file=fh)

          def send_to_discord(listing):
              message = f"**Company**: {listing['company_name']}\n**Role**: {listing['title']}\n**Location**: {', '.join(listing['locations'])}\n**Application/Link**: [Apply Here]({listing['url']})\n**Date Posted**: {datetime.fromtimestamp(listing['date_posted']).strftime('%b %d, %Y')}\n**Terms**: {', '.join(listing['terms'])}"
              payload = {
                  "content": message
              }
              webhook_url = os.getenv('DISCORD_WEBHOOK')
              response = os.system(f"curl -H 'Content-Type: application/json' -X POST -d '{json.dumps(payload)}' {webhook_url}")
              print(f"Sent message to Discord: {message}")
              return response

          def main():
              listings_path = Path('job-listings/.github/scripts/listings.json')
              last_id_path = Path('.github/scripts/last_listing_id.txt')
              
              if not last_id_path.exists():
                  last_id_path.write_text("0")
              
              with listings_path.open() as f:
                  listings = json.load(f)
              
              last_id = last_id_path.read_text().strip()
              new_listing = next((listing for listing in sorted(listings, key=lambda x: x['id']) if listing['id'] > last_id), None)
              
              if new_listing:
                  send_to_discord(new_listing)
                  last_id_path.write_text(new_listing['id'])

          if __name__ == "__main__":
              main()
          EOF
          python script.py

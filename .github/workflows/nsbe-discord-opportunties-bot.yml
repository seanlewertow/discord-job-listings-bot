name: Notify Discord

on:
  schedule:
    - cron: '0 12 * * *' # Runs daily at 12:00 UTC
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout job listings repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/Summer2025-Internships # Public repository with job listings
          path: job-listings

      - name: Checkout personal repository
        uses: actions/checkout@v2
        with:
          repository: seanlewertow/discord-job-listings-bot
          path: personal-repo
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      - name: Extract and Send job listings
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from datetime import datetime
          from pathlib import Path
          import requests

          # Load the listings
          listings_path = Path('job-listings/.github/scripts/listings.json')
          with listings_path.open() as f:
              listings = json.load(f)

          # Get the most recent listing (the last one in the JSON file)
          recent_listing = listings[-1]

          # Load the last sent listing
          last_sent_listing_path = Path('personal-repo/last_sent_listing.json')
          if last_sent_listing_path.exists() and last_sent_listing_path.stat().st_size != 0:
              with last_sent_listing_path.open() as f:
                  last_sent_listing = json.load(f)
          else:
              last_sent_listing = {}

          # Check if the recent listing was already sent
          if last_sent_listing.get('id') != recent_listing['id']:
              # Extract listing details
              company_name = recent_listing['company_name']
              title = recent_listing['title']
              locations = ', '.join(recent_listing['locations'])
              url = recent_listing['url']
              date_posted = datetime.fromtimestamp(recent_listing['date_posted']).strftime('%Y-%m-%d')
              term = ', '.join(recent_listing['terms'])

              # Format the message
              message = (
                  f"**Company:** {company_name}\n"
                  f"**Role:** {title}\n"
                  f"**Location:** {locations}\n"
                  f"**Application/Link:** [Apply Here]({url})\n"
                  f"**Date Posted:** {date_posted}\n"
                  f"**Term:** {term}\n"
                  "---------------------------"
              )

              # Send the message to Discord
              response = requests.post(
                  os.getenv('DISCORD_WEBHOOK'),
                  json={'content': message}
              )

              # Raise an error if the request failed
              response.raise_for_status()

              # Output the sent message
              print("\n--- Sent Listing ---")
              print(message)

              # Update the last sent listing
              with last_sent_listing_path.open('w') as f:
                  json.dump(recent_listing, f, indent=4)

              # Commit the updated last sent listing
              os.system('git config --global user.name "github-actions[bot]"')
              os.system('git config --global user.email "github-actions[bot]@users.noreply.github.com"')
              os.system('git add personal-repo/last_sent_listing.json')
              os.system(f'git commit -m "Update last sent listing: {title}"')
              os.system(f'git push https://seanlewertow:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/seanlewertow/discord-job-listings-bot.git')
          
          EOF
          python script.py

name: Notify Discord

on:
  schedule:
    - cron: '0 12 * * *' # Runs daily at 12:00 UTC
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout job listings repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/Summer2025-Internships # Public repository with job listings
          path: job-listings

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      - name: Extract and Send job listings
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from datetime import datetime
          from pathlib import Path
          import requests

          # Load the listings
          listings_path = Path('job-listings/.github/scripts/listings.json')
          with listings_path.open() as f:
              listings = json.load(f)

          # Sort listings by date_posted in descending order and get the last 5 listings
          sorted_listings = sorted(listings, key=lambda x: x['date_posted'], reverse=True)[:5]

          # Process each listing
          messages = []
          for listing in sorted_listings:
              company_name = listing['company_name']
              title = listing['title']
              locations = ', '.join(listing['locations'])
              url = listing['url']
              date_posted = datetime.fromtimestamp(listing['date_posted']).strftime('%Y-%m-%d')
              terms = ', '.join(listing['terms'])
              
              # Format the message
              message = (
                  f"**Company:** {company_name}\n"
                  f"**Role:** {title}\n"
                  f"**Location:** {locations}\n"
                  f"**Application/Link:** [Apply Here]({url})\n"
                  f"**Date Posted:** {date_posted}\n"
                  f"**Term:** {terms}\n"
                  "---------------------------"
              )
              
              # Send the message to Discord
              response = requests.post(
                  os.getenv('DISCORD_WEBHOOK'),
                  json={'content': message}
              )

              # Raise an error if the request failed
              response.raise_for_status()

              # Output the sent message
              print("\n--- Sent Listing ---")
              print(message)

              messages.append(message)

          # Output the extracted and sent messages
          print("\n--- Extracted Listings ---")
          for msg in messages:
              print(msg)

          # Commit message for the listings
          commit_message = "Updated listings sent to Discord:\n" + "\n".join([listing['title'] for listing in sorted_listings])
          print(f"\n--- Commit Message ---\n{commit_message}")

          EOF
          python script.py

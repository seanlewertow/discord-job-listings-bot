name: Extract and Send job listings

on:
  push:
    paths:
      - 'job-listings/.github/scripts/listings.json'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout job listings repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq

      - name: Extract and Send job listings
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from pathlib import Path

          # Load the listings
          listings_path = Path('job-listings/.github/scripts/listings.json')
          last_id_path = Path('job-listings/.github/scripts/last_listing_id.txt')
          
          with listings_path.open() as f:
              listings = json.load(f)

          # Sort listings by date_posted in descending order
          sorted_listings = sorted(listings, key=lambda x: x['date_posted'], reverse=True)

          # Load the last processed listing ID
          with last_id_path.open() as f:
              last_id = int(f.read().strip())

          # Find the new listings since the last processed ID
          new_listings = [listing for listing in sorted_listings if listing['date_posted'] > last_id]

          # Process each new listing
          messages = []
          for listing in new_listings:
              company_name = listing['company_name']
              title = listing['title']
              locations = ', '.join(listing['locations'])
              url = listing['url']
              date_posted = listing['date_posted']
              terms = ', '.join(listing['terms'])
              message = f"**Company**: {company_name}\n**Role**: {title}\n**Location**: {locations}\n**Application/Link**: [Apply Here]({url})\n**Date Posted**: {date_posted}\n**Term**: {terms}"
              print(f'Sending message: {message}')
              os.system(f'curl -H "Content-Type: application/json" -X POST -d "{{\\"content\\": \\"{message}\\"}}" {os.getenv("DISCORD_WEBHOOK")}')
              messages.append(message)
          
          # Update the last processed listing ID
          if new_listings:
              last_id_path.write_text(str(new_listings[0]['date_posted']))

          # Output the extracted and sent messages
          print("\n--- Extracted Listings ---")
          for msg in messages:
              print(msg)
          
          EOF
          python script.py

name: Notify Discord - New Grad Positions

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main
    paths:
      - 'new-grad-positions/.github/scripts/listings.json' # Triggers only when new grad listings.json is updated

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout new grad positions repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/New-Grad-Positions
          path: new-grad-positions

      - name: Checkout personal repository
        uses: actions/checkout@v2
        with:
          repository: seanlewertow/discord-job-listings-bot
          path: personal-repo
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      - name: Extract and Send new grad listings
        id: extract_and_send
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from datetime import datetime
          from pathlib import Path
          import requests

          # Load the listings from new grad positions repository
          new_grad_listings_path = Path('new-grad-positions/.github/scripts/listings.json')
          
          with new_grad_listings_path.open() as f:
              new_grad_listings = json.load(f)

          # Load the last sent listing for new grad positions
          last_sent_new_grad_path = Path('personal-repo/.github/data/last_sent_new_grad_listing.json')

          if last_sent_new_grad_path.exists():
              with last_sent_new_grad_path.open() as f:
                  last_sent_new_grad_listing = json.load(f)
          else:
              last_sent_new_grad_listing = {}

          # Get the most recent new grad listing (the last one in the JSON file)
          recent_new_grad_listing = new_grad_listings[-1]

          # Debug: Print recent and last sent listings
          print(f"Recent New Grad Listing ID: {recent_new_grad_listing['id']}")
          print(f"Last Sent New Grad Listing ID: {last_sent_new_grad_listing.get('id')}")

          # Check if the recent listing was already sent
          new_grad_listing_message = ""
          if recent_new_grad_listing['id'] != last_sent_new_grad_listing.get('id'):
              # Extract new grad listing details
              new_grad_company_name = recent_new_grad_listing['company_name']
              new_grad_title = recent_new_grad_listing['title']
              new_grad_locations = ', '.join(recent_new_grad_listing['locations'])
              new_grad_url = recent_new_grad_listing['url']
              new_grad_date_posted = datetime.fromtimestamp(recent_new_grad_listing['date_posted']).strftime('%Y-%m-%d')

              # Format the message for new grad listing
              new_grad_listing_message = (
                  f"**[FULL-TIME]**\n"
                  f"**Company:** {new_grad_company_name}\n"
                  f"**Role:** {new_grad_title}\n"
                  f"**Location:** {new_grad_locations}\n"
                  f"**Application/Link:** [Apply Here]({new_grad_url})\n"
                  f"**Date Posted:** {new_grad_date_posted}\n"
                  "---------------------------"
              )

              # Send the message to Discord
              response = requests.post(
                  os.getenv('DISCORD_WEBHOOK'),
                  json={'content': new_grad_listing_message}
              )

              # Raise an error if the request failed
              response.raise_for_status()

              # Output the sent message
              print("\n--- Sent New Grad Listing ---")
              print(new_grad_listing_message)

              # Update last sent new grad listing file
              with last_sent_new_grad_path.open('w') as f:
                  json.dump(recent_new_grad_listing, f, indent=2)

          # Prepare commit message
          commit_message = ""
          if new_grad_listing_message:
              commit_message += f"Update last sent new grad listing: {recent_new_grad_listing['title']}"

          print(f"\n--- Commit Message ---\n{commit_message}")
          EOF
          python script.py

      - name: Check if there are new listings
        id: check_new_listings
        run: |
          if [ -f "no_new_grad_listings.txt" ]; then
            echo "no_new_grad_listings=true" >> $GITHUB_ENV
          else
            echo "no_new_grad_listings=false" >> $GITHUB_ENV
          fi

      - name: Commit and push last sent listing to personal repository
        if: env.no_new_grad_listings == 'false'
        run: |
          cd personal-repo
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .github/data/last_sent_new_grad_listing.json
          git commit -m "Update last sent listings"
          git push

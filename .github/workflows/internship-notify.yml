name: Notify Discord - Internships

on:
  repository_dispatch:
    types: [internship_update_detected]

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Summer2025-Internships repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/Summer2025-Internships
          path: summer2025

      - name: Checkout personal repository
        uses: actions/checkout@v2
        with:
          repository: seanlewertow/discord-job-listings-bot
          path: personal-repo
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      - name: Extract and Send job listings
        id: extract_and_send
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from datetime import datetime
          from pathlib import Path
          import requests

          # Load the listings from summer internships repository
          summer_listings_path = Path('summer2025/.github/scripts/listings.json')

          with summer_listings_path.open() as f:
              summer_listings = json.load(f)

          # Load the last sent listing for internships
          last_sent_internship_path = Path('personal-repo/.github/data/last_sent_internship_listing.json')

          if last_sent_internship_path.exists():
              with last_sent_internship_path.open() as f:
                  last_sent_internship_listing = json.load(f)
          else:
              last_sent_internship_listing = {}

          # Get the most recent internship listing (the last one in the JSON file)
          recent_internship_listing = summer_listings[-1]

          # Debug: Print recent and last sent listings
          print(f"Recent Internship Listing ID: {recent_internship_listing['id']}")
          print(f"Last Sent Internship Listing ID: {last_sent_internship_listing.get('id')}")

          # Check if the recent listing was already sent
          internship_listing_message = ""
          if recent_internship_listing['id'] != last_sent_internship_listing.get('id'):
              # Extract internship listing details
              internship_company_name = recent_internship_listing['company_name']
              internship_title = recent_internship_listing['title']
              internship_locations = ', '.join(recent_internship_listing['locations'])
              internship_url = recent_internship_listing['url']
              internship_date_posted = datetime.fromtimestamp(recent_internship_listing['date_posted']).strftime('%Y-%m-%d')
              internship_term = ', '.join(recent_internship_listing['terms'])

              # Format the message for internship listing with emojis
              internship_listing_message = (
                  f"🚀 **[INTERNSHIP]** 🚀\n"
                  f"🏢 **Company:** {internship_company_name}\n"
                  f"💼 **Role:** {internship_title}\n"
                  f"📍 **Location:** {internship_locations}\n"
                  f"🔗 **Application/Link:** [Apply Here]({internship_url})\n"
                  f"📅 **Date Posted:** {internship_date_posted}\n"
                  f"🕒 **Term:** {internship_term}\n"
                  "---------------------------"
              )

              # Send the message to Discord
              response = requests.post(
                  os.getenv('DISCORD_WEBHOOK'),
                  json={'content': internship_listing_message}
              )

              # Raise an error if the request failed
              response.raise_for_status()

              # Output the sent message
              print("\n--- Sent Internship Listing ---")
              print(internship_listing_message)

              # Update last sent internship listing file
              with last_sent_internship_path.open('w') as f:
                  json.dump(recent_internship_listing, f, indent=2)

          # Prepare commit message
          commit_message = ""
          if internship_listing_message:
              commit_message += f"Update last sent internship listing: {recent_internship_listing['title']}"

          print(f"\n--- Commit Message ---\n{commit_message}")

          # Create a flag file if there's nothing to commit
          if not commit_message:
              with open('no_new_listings.txt', 'w') as flag_file:
                  flag_file.write('true')
          EOF
          python script.py

      - name: Check if there are new listings
        id: check_new_listings
        run: |
          if [ -f "no_new_listings.txt" ]; then
            echo "no_new_listings=true" >> $GITHUB_ENV
          else
            echo "no_new_listings=false" >> $GITHUB_ENV
          fi

      - name: Commit and push last sent listing to personal repository
        if: env.no_new_listings == 'false'
        run: |
          cd personal-repo
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull --rebase
          git add .github/data/last_sent_internship_listing.json
          git commit -m "Update last sent listing"
          git push

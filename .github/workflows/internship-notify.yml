name: Notify Discord - Internships

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - '.github/scripts/listings.json' # Triggers when listings.json is updated in either repo

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Summer2025-Internships repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/Summer2025-Internships
          path: summer2025

      - name: Checkout New-Grad-Positions repository
        uses: actions/checkout@v2
        with:
          repository: SimplifyJobs/New-Grad-Positions
          path: new-grad

      - name: Checkout personal repository
        uses: actions/checkout@v2
        with:
          repository: seanlewertow/discord-job-listings-bot
          path: personal-repo
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq requests

      - name: Extract and Send job listings
        id: extract_and_send
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cat << 'EOF' > script.py
          import json
          import os
          from datetime import datetime
          from pathlib import Path
          import requests

          # Load the listings
          listings_paths = [
              Path('summer2025/.github/scripts/listings.json'),
              Path('new-grad/.github/scripts/listings.json')
          ]

          listings = []
          for listings_path in listings_paths:
              if listings_path.exists():
                  with listings_path.open() as f:
                      listings.extend(json.load(f))

          # Sort listings by date posted
          listings.sort(key=lambda x: x['date_posted'], reverse=True)

          # Load the last sent listing
          last_sent_path = Path('personal-repo/.github/data/last_sent_internship_listing.json')
          if last_sent_path.exists():
              with last_sent_path.open() as f:
                  last_sent_internship_listing = json.load(f)
          else:
              last_sent_internship_listing = {}

          # Get the most recent listing (the last one in the JSON file)
          recent_listing = listings[0]

          # Debug: Print recent and last sent listings
          print(f"Recent Listing ID: {recent_listing['id']}")
          print(f"Last Sent Listing ID: {last_sent_internship_listing.get('id')}")

          # Check if the recent listing was already sent
          if recent_listing['id'] == last_sent_internship_listing.get('id'):
              print("No new listings to send.")
              # Create a flag file to indicate no new listings
              with open('no_new_listings.txt', 'w') as flag_file:
                  flag_file.write('true')
              exit(0)

          # Extract listing details
          company_name = recent_listing['company_name']
          title = recent_listing['title']
          locations = ', '.join(recent_listing['locations'])
          url = recent_listing['url']
          date_posted = datetime.fromtimestamp(recent_listing['date_posted']).strftime('%Y-%m-%d')
          term = ', '.join(recent_listing['terms'])

          # Format the message with emojis
          message = (
              f"🚀 **[INTERNSHIP]** 🚀\n"
              f"🏢 **Company:** {company_name}\n"
              f"💼 **Role:** {title}\n"
              f"📍 **Location:** {locations}\n"
              f"🔗 **Application/Link:** [Apply Here]({url})\n"
              f"📅 **Date Posted:** {date_posted}\n"
              f"🕒 **Term:** {term}\n"
              "---------------------------"
          )

          # Send the message to Discord
          response = requests.post(
              os.getenv('DISCORD_WEBHOOK'),
              json={'content': message}
          )

          # Raise an error if the request failed
          response.raise_for_status()

          # Output the sent message
          print("\n--- Sent Listing ---")
          print(message)

          # Update last sent listing file
          with last_sent_path.open('w') as f:
              json.dump(recent_listing, f, indent=2)

          # Prepare commit message
          commit_message = f"Update last sent listing: {title}"
          print(f"\n--- Commit Message ---\n{commit_message}")
          EOF
          python script.py

      - name: Check if there are new listings
        id: check_new_listings
        run: |
          if [ -f "no_new_listings.txt" ]; then
            echo "no_new_listings=true" >> $GITHUB_ENV
          else
            echo "no_new_listings=false" >> $GITHUB_ENV
          fi

      - name: Commit and push last sent listing to personal repository
        if: env.no_new_listings == 'false'
        run: |
          cd personal-repo
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .github/data/last_sent_internship_listing.json
          git commit -m "Update last sent listing"
          git push
